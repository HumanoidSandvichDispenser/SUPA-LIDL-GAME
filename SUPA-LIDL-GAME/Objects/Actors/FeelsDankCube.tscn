[gd_scene load_steps=21 format=2]

[ext_resource path="res://Objects/BoundingBoxes/EnemyHitbox.tscn" type="PackedScene" id=1]
[ext_resource path="res://Objects/Utils/Stats.tscn" type="PackedScene" id=2]
[ext_resource path="res://Scripts/Entities/FeelsDankCube.cs" type="Script" id=3]
[ext_resource path="res://Assets/Enemies/FeelsDankCube.png" type="Texture" id=4]
[ext_resource path="res://Objects/BoundingBoxes/EnemyDamagebox.tscn" type="PackedScene" id=5]
[ext_resource path="res://Assets/Enemies/FeelsDankCube-first-frame.png" type="Texture" id=6]

[sub_resource type="Animation" id=6]
resource_name = "Hit"
length = 0.3
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:material:shader_param/active")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 1,
"values": [ true, false, true, false ]
}

[sub_resource type="Animation" id=3]
resource_name = "Idle"
length = 2.0
loop = true
step = 0.0666667
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.0666667, 0.133333, 0.2, 0.266667, 0.333333, 0.4, 0.466667, 0.533334, 0.6, 0.666667, 0.733334, 0.8, 0.866667, 0.933334, 1, 1.06667, 1.13333, 1.2, 1.26667, 1.33333, 1.4, 1.46667, 1.53333, 1.6, 1.66667, 1.73333, 1.8, 1.86667, 1.93333 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 ]
}

[sub_resource type="Animation" id=4]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Sprite:material:shader_param/active")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ false ]
}

[sub_resource type="AnimationNodeAnimation" id=10]
animation = "FeelsDankCubeHit"

[sub_resource type="AnimationNodeAnimation" id=11]
animation = "Idle"

[sub_resource type="AnimationNodeStateMachineTransition" id=12]

[sub_resource type="AnimationNodeStateMachineTransition" id=13]
switch_mode = 2
auto_advance = true

[sub_resource type="AnimationNodeStateMachine" id=8]
states/Hit/node = SubResource( 10 )
states/Hit/position = Vector2( 675, 61 )
states/Idle/node = SubResource( 11 )
states/Idle/position = Vector2( 412, 69 )
transitions = [ "Idle", "Hit", SubResource( 12 ), "Hit", "Idle", SubResource( 13 ) ]
start_node = "Idle"

[sub_resource type="AnimationNodeStateMachinePlayback" id=9]

[sub_resource type="RectangleShape2D" id=14]

[sub_resource type="CircleShape2D" id=15]
radius = 16.0

[sub_resource type="Shader" id=16]
code = "shader_type particles;
// this shader was converted from a ParticlesMaterial
// you can find the explosion related parts by searching \"explosion\"
uniform vec3 direction;
uniform float spread;
uniform float flatness;
uniform float initial_linear_velocity;
uniform float initial_angle;
uniform float angular_velocity;
uniform float orbit_velocity;
uniform float linear_accel;
uniform float radial_accel;
uniform float tangent_accel;
uniform float damping;
uniform float scale;
uniform float hue_variation;
uniform float anim_speed;
uniform float anim_offset;
uniform float initial_linear_velocity_random;
uniform float initial_angle_random;
uniform float angular_velocity_random;
uniform float orbit_velocity_random;
uniform float linear_accel_random;
uniform float radial_accel_random;
uniform float tangent_accel_random;
uniform float damping_random;
uniform float scale_random;
uniform float hue_variation_random;
uniform float anim_speed_random;
uniform float anim_offset_random;
uniform float lifetime_randomness;
uniform vec3 emission_box_extents;
uniform vec4 color_value : hint_color;
uniform int trail_divisor;
uniform vec3 gravity;
// sprite that will explode
uniform sampler2D sprite;

float rand_from_seed(inout uint seed) {
	int k;
	int s = int(seed);
	if (s == 0)
	s = 305420679;
	k = s / 127773;
	s = 16807 * (s - k * 127773) - 2836 * k;
	if (s < 0)
		s += 2147483647;
	seed = uint(s);
	return float(seed % uint(65536)) / 65535.0;
}

float rand_from_seed_m1_p1(inout uint seed) {
	return rand_from_seed(seed) * 2.0 - 1.0;
}

uint hash(uint x) {
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = (x >> uint(16)) ^ x;
	return x;
}

void vertex() {
	uint base_number = NUMBER / uint(trail_divisor);
	uint alt_seed = hash(base_number + uint(1) + RANDOM_SEED);
	float angle_rand = rand_from_seed(alt_seed);
	float scale_rand = rand_from_seed(alt_seed);
	float hue_rot_rand = rand_from_seed(alt_seed);
	float anim_offset_rand = rand_from_seed(alt_seed);
	float pi = 3.14159;
	float degree_to_rad = pi / 180.0;

	bool restart = false;
	if (CUSTOM.y > CUSTOM.w) {
		restart = true;
	}

	if (RESTART || restart) {
		float tex_linear_velocity = 0.0;
		float tex_angle = 0.0;
		float tex_anim_offset = 0.0;
		float spread_rad = spread * degree_to_rad;
		float angle1_rad = rand_from_seed_m1_p1(alt_seed) * spread_rad;
		angle1_rad += direction.x != 0.0 ? atan(direction.y, direction.x) : sign(direction.y) * (pi / 2.0);
		vec3 rot = vec3(cos(angle1_rad), sin(angle1_rad), 0.0);
		VELOCITY = rot * initial_linear_velocity * mix(1.0, rand_from_seed(alt_seed), initial_linear_velocity_random);
		float base_angle = (initial_angle + tex_angle) * mix(1.0, angle_rand, initial_angle_random);
		CUSTOM.x = base_angle * degree_to_rad;
		CUSTOM.y = 0.0;
		CUSTOM.w = (1.0 - lifetime_randomness * rand_from_seed(alt_seed));
		CUSTOM.z = (anim_offset + tex_anim_offset) * mix(1.0, anim_offset_rand, anim_offset_random);
		TRANSFORM[3].xyz = vec3(rand_from_seed(alt_seed) * 2.0 - 1.0, rand_from_seed(alt_seed) * 2.0 - 1.0, rand_from_seed(alt_seed) * 2.0 - 1.0) * emission_box_extents;
		VELOCITY = (EMISSION_TRANSFORM * vec4(VELOCITY, 0.0)).xyz;
		TRANSFORM = EMISSION_TRANSFORM * TRANSFORM;
		VELOCITY.z = 0.0;
		TRANSFORM[3].z = 0.0;
		
		// Explosion code starts here
		vec2 particlePosition = TRANSFORM[3].xy;
		vec2 textureS = vec2(textureSize(sprite, 0));
		// vec2(0.5, 0.5) is the UV coordinate of the explosion's origin 
		vec4 spriteColor = texture(sprite, particlePosition / textureS + vec2(0.5, 0.5));
		COLOR = spriteColor;
		// particle movement
		VELOCITY.xy = particlePosition * initial_linear_velocity;
		// ignore transparent pixels
		if (spriteColor.a == 0.0)
		{
			ACTIVE = false;
		}
	} else {
		CUSTOM.y += DELTA / LIFETIME;
		float tex_linear_velocity = 0.0;
		float tex_orbit_velocity = 0.0;
		float tex_angular_velocity = 0.0;
		float tex_linear_accel = 0.0;
		float tex_radial_accel = 0.0;
		float tex_tangent_accel = 0.0;
		float tex_damping = 0.0;
		float tex_angle = 0.0;
		float tex_anim_speed = 0.0;
		float tex_anim_offset = 0.0;
		vec3 force = gravity;
		vec3 pos = TRANSFORM[3].xyz;
		pos.z = 0.0;
		// apply linear acceleration
		force += length(VELOCITY) > 0.0 ? normalize(VELOCITY) * (linear_accel + tex_linear_accel) * mix(1.0, rand_from_seed(alt_seed), linear_accel_random) : vec3(0.0);
		// apply radial acceleration
		vec3 org = EMISSION_TRANSFORM[3].xyz;
		vec3 diff = pos - org;
		force += length(diff) > 0.0 ? normalize(diff) * (radial_accel + tex_radial_accel) * mix(1.0, rand_from_seed(alt_seed), radial_accel_random) : vec3(0.0);
		// apply tangential acceleration;
		force += length(diff.yx) > 0.0 ? vec3(normalize(diff.yx * vec2(-1.0, 1.0)), 0.0) * ((tangent_accel + tex_tangent_accel) * mix(1.0, rand_from_seed(alt_seed), tangent_accel_random)) : vec3(0.0);
		// apply attractor forces
		VELOCITY += force * DELTA;
		// orbit velocity
		float orbit_amount = (orbit_velocity + tex_orbit_velocity) * mix(1.0, rand_from_seed(alt_seed), orbit_velocity_random);
		if (orbit_amount != 0.0) {
		     float ang = orbit_amount * DELTA * pi * 2.0;
		     mat2 rot = mat2(vec2(cos(ang), -sin(ang)), vec2(sin(ang), cos(ang)));
		     TRANSFORM[3].xy -= diff.xy;
		     TRANSFORM[3].xy += rot * diff.xy;
		}
		if (damping + tex_damping > 0.0) {
			float v = length(VELOCITY);
			float damp = (damping + tex_damping) * mix(1.0, rand_from_seed(alt_seed), damping_random);
			v -= damp * DELTA;
			if (v < 0.0) {
				VELOCITY = vec3(0.0);
			} else {
				VELOCITY = normalize(VELOCITY) * v;
			}
		}
		float base_angle = (initial_angle + tex_angle) * mix(1.0, angle_rand, initial_angle_random);
		base_angle += CUSTOM.y * LIFETIME * (angular_velocity + tex_angular_velocity) * mix(1.0, rand_from_seed(alt_seed) * 2.0 - 1.0, angular_velocity_random);
		CUSTOM.x = base_angle * degree_to_rad;
		CUSTOM.z = (anim_offset + tex_anim_offset) * mix(1.0, anim_offset_rand, anim_offset_random) + CUSTOM.y * (anim_speed + tex_anim_speed) * mix(1.0, rand_from_seed(alt_seed), anim_speed_random);
	}
	float tex_scale = 1.0;
	float tex_hue_variation = 0.0;
//// this part is commented out because it overwrites the particle color
//	float hue_rot_angle = (hue_variation + tex_hue_variation) * pi * 2.0 * mix(1.0, hue_rot_rand * 2.0 - 1.0, hue_variation_random);
//	float hue_rot_c = cos(hue_rot_angle);
//	float hue_rot_s = sin(hue_rot_angle);
//	mat4 hue_rot_mat = mat4(vec4(0.299, 0.587, 0.114, 0.0),
//			vec4(0.299, 0.587, 0.114, 0.0),
//			vec4(0.299, 0.587, 0.114, 0.0),
//			vec4(0.000, 0.000, 0.000, 1.0)) +
//		mat4(vec4(0.701, -0.587, -0.114, 0.0),
//			vec4(-0.299, 0.413, -0.114, 0.0),
//			vec4(-0.300, -0.588, 0.886, 0.0),
//			vec4(0.000, 0.000, 0.000, 0.0)) * hue_rot_c +
//		mat4(vec4(0.168, 0.330, -0.497, 0.0),
//			vec4(-0.328, 0.035,  0.292, 0.0),
//			vec4(1.250, -1.050, -0.203, 0.0),
//			vec4(0.000, 0.000, 0.000, 0.0)) * hue_rot_s;
//	COLOR = hue_rot_mat * color_value;

	TRANSFORM[0] = vec4(cos(CUSTOM.x), -sin(CUSTOM.x), 0.0, 0.0);
	TRANSFORM[1] = vec4(sin(CUSTOM.x), cos(CUSTOM.x), 0.0, 0.0);
	TRANSFORM[2] = vec4(0.0, 0.0, 1.0, 0.0);
	float base_scale = tex_scale * mix(scale, 1.0, scale_random * scale_rand);
	if (base_scale < 0.000001) {
		base_scale = 0.000001;
	}
	TRANSFORM[0].xyz *= base_scale;
	TRANSFORM[1].xyz *= base_scale;
	TRANSFORM[2].xyz *= base_scale;
	VELOCITY.z = 0.0;
	
	// Explosion code, fades out the particles
	if (COLOR.a > 0.0)
	{
		COLOR.a -= 1.0 / LIFETIME * DELTA;
	}
	
	TRANSFORM[3].z = 0.0;
	if (CUSTOM.y > CUSTOM.w) {		ACTIVE = false;
	}
}"

[sub_resource type="ShaderMaterial" id=17]
shader = SubResource( 16 )
shader_param/direction = Vector3( 1, 0, 0 )
shader_param/spread = 5.0
shader_param/flatness = null
shader_param/initial_linear_velocity = 20.0
shader_param/initial_angle = null
shader_param/angular_velocity = null
shader_param/orbit_velocity = null
shader_param/linear_accel = 7.0
shader_param/radial_accel = null
shader_param/tangent_accel = null
shader_param/damping = null
shader_param/scale = null
shader_param/hue_variation = null
shader_param/anim_speed = null
shader_param/anim_offset = null
shader_param/initial_linear_velocity_random = null
shader_param/initial_angle_random = null
shader_param/angular_velocity_random = null
shader_param/orbit_velocity_random = null
shader_param/linear_accel_random = null
shader_param/radial_accel_random = null
shader_param/tangent_accel_random = null
shader_param/damping_random = null
shader_param/scale_random = null
shader_param/hue_variation_random = null
shader_param/anim_speed_random = null
shader_param/anim_offset_random = null
shader_param/lifetime_randomness = null
shader_param/emission_box_extents = null
shader_param/color_value = null
shader_param/trail_divisor = null
shader_param/gravity = null
shader_param/sprite = ExtResource( 6 )

[sub_resource type="CircleShape2D" id=18]
radius = 8.0

[node name="FeelsDankCube" type="KinematicBody2D"]
collision_layer = 0
script = ExtResource( 3 )
AccelerationMagnitude = 256.0
FrictionCoefficient = 256.0
MaxSpeed = 64.0
IsFlyingBody = true
Behavior = 1

[node name="Stats" parent="." instance=ExtResource( 2 )]

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
reset_on_save = false
anims/Hit = SubResource( 6 )
anims/Idle = SubResource( 3 )
anims/RESET = SubResource( 4 )

[node name="Sprite" type="Sprite" parent="."]
scale = Vector2( 0.25, 0.25 )
texture = ExtResource( 4 )
hframes = 5
vframes = 6
frame = 10

[node name="AnimationTree" type="AnimationTree" parent="."]
tree_root = SubResource( 8 )
anim_player = NodePath("../AnimationPlayer")
active = true
parameters/playback = SubResource( 9 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource( 14 )

[node name="EnemyHitbox" parent="." instance=ExtResource( 1 )]

[node name="CollisionShape2D" parent="EnemyHitbox" index="0"]
shape = SubResource( 15 )

[node name="DeathParticles" type="Particles2D" parent="."]
process_material = SubResource( 17 )

[node name="EnemyDamagebox" parent="." instance=ExtResource( 5 )]
Damage = 20.0
Knockback = 250.0
InflictorBodyPath = ".."

[node name="CollisionShape2D" parent="EnemyDamagebox" index="0"]
shape = SubResource( 18 )

[connection signal="ReceivedDamage" from="EnemyHitbox" to="." method="_on_EnemyHitbox_ReceivedDamage"]

[editable path="EnemyHitbox"]
[editable path="EnemyDamagebox"]
